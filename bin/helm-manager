#!/bin/bash

set -eu

# Uses minica to generate certs:
# * https://github.com/jsha/minica

# Inputs to this script come from:
# * http://jayunit100.blogspot.com/2017/07/helm-on.html
# * https://github.com/helm/helm/blob/master/docs/tiller_ssl.md
# * https://github.com/helm/helm/blob/master/docs/securing_installation.md#best-practices-for-securing-helm-and-tiller
# * https://letsencrypt.org/docs/certificates-for-localhost/#making-and-trusting-your-own-certificates

repo_root=$(dirname $(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd))

project_root=${HELM_MGR_PROJECT_ROOT:-${repo_root}}
state=${HELM_MGR_STATE_ROOT:-${project_root}/state}
cache=${state}/cache

export HELM_HOME=${HELM_HOME:-$(helm home)}

mkdir -p ${state}
mkdir -p ${cache}
tmp=$(mktemp -d)
trap "rm -fr ${tmp}" EXIT


usage() {
    echo "Helm/Tiller Deployment Manager CLI"
    echo "  up   -- deploys the Tiller to current Kubernetes context"
    echo "  down -- deletes to current Kubernetes context"
}

tiller_status() {
    kubectl -n kube-system get pods -l app=helm -o jsonpath='{.items[*].status.phase}' | sort | uniq
}

up() {
    echo "Installing helm into current Kuberenetes context..."
    kubectl apply -f ${project_root}/src/helm.yaml

    pushd ${state}
    echo "Creating certificates..."
    [[ -f ./ca.key.pem ]] || {
        [[ "$(which minica)X" == "X" ]] && {
            echo " - installing minica"
            go get github.com/jsha/minica
        }
        minica \
            -ca-cert ca.cert.pem \
            -ca-key ca.key.pem \
            -domains tiller-deploy.kube-system \
            -ip-addresses 127.0.0.1
    }

    unset HELM_TLS
    unset HELM_TLS_VERIFY
    helm init \
        --service-account helm \
        --tiller-tls \
        --tiller-tls-verify \
        --tls-ca-cert     ./ca.cert.pem \
        --tiller-tls-cert ./tiller-deploy.kube-system/cert.pem \
        --tiller-tls-key  ./tiller-deploy.kube-system/key.pem \
        --tiller-tls-hostname 127.0.0.1 \
        --override 'spec.template.spec.containers[0].command'='{/tiller,--storage=secret}' \
        --wait \
        --upgrade

    echo "Installing helm client certificates..."
    cp ./ca.cert.pem ${HELM_HOME}/ca.pem
    cp ./tiller-deploy.kube-system/cert.pem ${HELM_HOME}/cert.pem
    cp ./tiller-deploy.kube-system/key.pem ${HELM_HOME}/key.pem
    popd

    echo "Tiller is ready, testing connection, and certificates:"
    helm ls --tls && echo "  working!"
}

down() {
    set +e
    kubectl delete deployment tiller-deploy --namespace=kube-system
    kubectl delete service tiller-deploy --namespace=kube-system
    kubectl delete secret tiller-secret -n kube-system
    kubectl delete -f ./src/helm.yaml
    rm -rf ~/.helm/
}

clean() {
    rm -rf ${state}
}

case "${1:-usage}" in
    up)
        shift
        up
        ;;

    down)
        shift
        down
        ;;

    clean)
        shift
        clean
        ;;

    *)
        usage
        exit 1
        ;;
esac

